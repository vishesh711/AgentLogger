version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - agentlogger-network
    environment:
      - VITE_API_URL=http://localhost:8000/api/v1

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      # Database
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/agentlogger
      - POSTGRES_SERVER=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=agentlogger
      
      # AI/LLM
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GROQ_MODEL=llama3-70b-8192
      
      # Security
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-this-in-production}
      - ACCESS_TOKEN_EXPIRE_MINUTES=10080
      
      # OAuth (optional - set in .env file)
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID:-}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET:-}
      - GITHUB_REDIRECT_URI=http://localhost:8000/api/v1/auth/github/callback
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-}
      - GOOGLE_REDIRECT_URI=http://localhost:8000/api/v1/auth/google/callback
      
      # Application settings
      - ENVIRONMENT=development
      - USE_DOCKER_SANDBOX=true
      - USE_REDIS=false
      - ENABLE_ANALYTICS=false
      
      # CORS
      - CORS_ORIGINS=http://localhost,http://localhost:80,http://localhost:3000,http://localhost:5173,http://localhost:8080
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - agentlogger-network
    volumes:
      - ./alembic:/app/alembic
      - ./app:/app/app

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=agentlogger
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - agentlogger-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Optional Redis service for caching/rate limiting
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - agentlogger-network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

networks:
  agentlogger-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: 